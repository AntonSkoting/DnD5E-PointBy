{"version":3,"sources":["components/ArrayInput.js","components/OutputBox.js","components/ArrayOutput.js","components/PointCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["ArrayInput","min","max","values","onChange","onChangeNum","event","key","newValue","Number","parseInt","target","value","map","index","className","type","style","width","textAlign","OutputBox","color","height","border","borderRadius","display","lineHeight","backgroundColor","ArrayOutput","PointCalculator","useState","Array","fill","bonuses","setBonuses","setValues","abilityScores","i","Math","length","push","points","reduce","sum","current","getPoints","marginBottom","getBoxColor","score","num","floor","calcModifier","toString","App","flexDirection","alignItems","margin","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2ad26c5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction ArrayInput({ min, max, values, onChange }) {\r\n\r\n    function onChangeNum(event, key) {\r\n        const newValue = Number.parseInt(event.target.value);\r\n        onChange(values.map((value, index) => {\r\n            if(index === key) return newValue;\r\n            else return value;\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div className=\"ArrayInput\">\r\n            {values.map((value, index) => {\r\n                return <input type=\"number\" onChange={event => onChangeNum(event, index)} style={{ width: \"2rem\", textAlign: 'right' }} min={min} max={max} value={value} key={index} />\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrayInput;","import React from \"react\";\r\n\r\nfunction OutputBox({value, color}) {\r\n\r\n    if(!color) color = 'white';\r\n\r\n    return <div style={{\r\n        width: '2.38rem', \r\n        height: '1.2rem',\r\n        border: '1px solid gray', \r\n        borderRadius: '2px',\r\n        display: 'inline-block', \r\n        lineHeight: '1.1rem',\r\n        textAlign: 'center',\r\n        backgroundColor: color\r\n    }} className=\"OutputBox\">{value}</div>\r\n}\r\n\r\nexport default OutputBox;","import React from \"react\";\r\nimport OutputBox from \"./OutputBox\";\r\n\r\nfunction ArrayOutput({values, color}) {\r\n    return (\r\n        <div className=\"ArrayOutput\">\r\n            {values.map((value, index) => {\r\n                return <OutputBox value={value} color={color} key={index} />\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ArrayOutput;","import { useState } from \"react\";\r\nimport ArrayInput from './ArrayInput';\r\nimport ArrayOutput from './ArrayOutput';\r\nimport OutputBox from './OutputBox';\r\n\r\nfunction PointCalculator() {\r\n\r\n    const [bonuses, setBonuses] = useState(new Array(6).fill(0));\r\n    const [values, setValues] = useState(new Array(6).fill(8));\r\n    const maxPoints = 27;\r\n\r\n    const abilityScores =[];\r\n    for (let i = 0; i < Math.min(bonuses.length, values.length); i++)\r\n        abilityScores.push(bonuses[i] + values[i]);\r\n\r\n    function addPlusSign(num) {\r\n        if (num >= 0) return '+' + num;\r\n        else return num.toString();\r\n    }\r\n\r\n    function calcModifier(score) {\r\n        return Math.floor((score - 10) / 2);\r\n    };\r\n\r\n    function getPoints(value) {\r\n        switch (value) {\r\n            case 8: return 0;\r\n            case 9: return 1;\r\n            case 10: return 2;\r\n            case 11: return 3;\r\n            case 12: return 4;\r\n            case 13: return 5;\r\n            case 14: return 7;\r\n            case 15: return 9;\r\n            default: return null;\r\n        }\r\n    };\r\n\r\n    const points = values.reduce((sum, current) => { return sum + getPoints(current) }, 0);\r\n\r\n    function getBoxColor(points) {\r\n        if (points < maxPoints) return '#FFFF00';\r\n        if (points > maxPoints) return '#FF4500';\r\n\r\n        return '#7CFC00';\r\n    };\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <label>Score Bonuses</label>\r\n            <ArrayInput min=\"0\" max=\"3\" values={bonuses} onChange={setBonuses} />\r\n            <label>Base Scores</label>\r\n            <ArrayInput min=\"8\" max=\"15\" values={values} onChange={setValues} />\r\n            <div style={{ marginBottom: '1.2rem' }}>\r\n                <label>Points: </label>\r\n                <OutputBox value={points} color={getBoxColor(points)} />\r\n                <label> / 27</label>\r\n            </div>\r\n            <label>Ability Scores</label>\r\n            <ArrayOutput values={abilityScores} />\r\n            <label>Ability Modefiers</label>\r\n            <ArrayOutput values={abilityScores.map(score => addPlusSign(calcModifier(score)))} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PointCalculator;","import './App.css';\nimport PointCalculator from './components/PointCalculator';\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"App\" style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <h1 className=\"header\" style={{ margin: '0 0 30px 0' }} >\n          Point-by Calculator\n        </h1>\n        <h6 className=\"header\" style={{ fontWeight: 'normal' }}>\n          <b>Abileties:</b><br />Strength, Dexterity, Constitution, Intelligence, Wisdom, Charisma.\n        </h6>\n        <PointCalculator />\n      </div>\n      <h3 className=\"credit\">Art by Tyler Jacobson</h3>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}